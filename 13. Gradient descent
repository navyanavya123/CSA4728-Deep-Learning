import numpy as np
import matplotlib.pyplot as plt

# Generate synthetic data: y = 4 + 3x + noise
np.random.seed(42)
X = 2 * np.random.rand(100, 1)
y = 4 + 3 * X + np.random.randn(100, 1)

# Add a bias column to X
X_b = np.c_[np.ones((100, 1)), X]

# Hyperparameters
learning_rate = 0.1
n_iterations = 1000
theta = np.random.randn(2, 1)

# Gradient Descent
for _ in range(n_iterations):
    gradients = (2/len(X_b)) * X_b.T.dot(X_b.dot(theta) - y)
    theta -= learning_rate * gradients

# Plot results
plt.scatter(X, y, color="blue")
plt.plot(X, X_b.dot(theta), color="red")
plt.show()
