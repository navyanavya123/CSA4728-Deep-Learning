import cv2
import numpy as np

# Step 1: Read the input image
image = cv2.imread('input_image.jpg')  # Replace 'input_image.jpg' with your image path

# Step 2: Convert the image to grayscale
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Step 3: Apply thresholding to create a binary image
_, binary_image = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)

# Step 4: Remove noise using morphological operations (opening)
kernel = np.ones((3, 3), np.uint8)
opening = cv2.morphologyEx(binary_image, cv2.MORPH_OPEN, kernel, iterations=2)

# Step 5: Identify sure background area by dilating the binary image
sure_bg = cv2.dilate(opening, kernel, iterations=3)

# Step 6: Identify sure foreground area using distance transform and thresholding
dist_transform = cv2.distanceTransform(opening, cv2.DIST_L2, 5)
_, sure_fg = cv2.threshold(dist_transform, 0.7 * dist_transform.max(), 255, 0)

# Step 7: Identify unknown region by subtracting sure foreground from background
sure_fg = np.uint8(sure_fg)
unknown = cv2.subtract(sure_bg, sure_fg)

# Step 8: Label markers and add 1 to all labels
_, markers = cv2.connectedComponents(sure_fg)
markers = markers + 1

# Step 9: Mark the unknown region as zero
markers[unknown == 255] = 0

# Step 10: Apply the Watershed algorithm
markers = cv2.watershed(image, markers)

# Step 11: Mark the boundaries in red
image[markers == -1] = [0, 0, 255]

# Step 12: Display the result
cv2.imshow('Watershed Segmentation', image)
cv2.waitKey(0)
cv2.destroyAllWindows()
